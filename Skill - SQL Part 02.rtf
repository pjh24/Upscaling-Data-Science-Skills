{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs26 \cf0 /* QUESTIONS \
/* Q1: Some of the facilities charge a fee to members, but some do not.\
Write a SQL query to produce a list of the names of the facilities that do. */\
\
SELECT facid, name\
FROM Facilities\
WHERE membercost > 0.0;\
\
\
/* Q2: How many facilities do not charge a fee to members? */\
\
SELECT COUNT(name)\
FROM Facilities\
WHERE membercost = 0.0;\
\
\
/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,\
where the fee is less than 20% of the facility's monthly maintenance cost.\
Return the facid, facility name, member cost, and monthly maintenance of the\
facilities in question. */\
\
SELECT facid, name, membercost, monthlymaintenance  \
FROM Facilities\
WHERE membercost < 0.2*monthlymaintenance;\
\
\
/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.\
Try writing the query without using the OR operator. */\
\
SELECT *\
FROM Facilities\
WHERE facid = 1 OR facid = 5;\
\
\
/* Q5: Produce a list of facilities, with each labelled as\
'cheap' or 'expensive', depending on if their monthly maintenance cost is\
more than $100. Return the name and monthly maintenance of the facilities\
in question. */\
\
SELECT name, monthlymaintenance,\
		CASE\
        	WHEN monthlymaintenance <= 100. THEN 'cheap'\
            ELSE 'expensive'\
        END AS 'price rating'\
FROM Facilities;\
\
\
/* Q6: You'd like to get the first and last name of the last member(s)\
who signed up. Try not to use the LIMIT clause for your solution. */\
\
SELECT firstname, surname\
FROM Members\
ORDER BY joindate DESC\
LIMIT 1;\
\
\
/* Q7: Produce a list of all members who have used a tennis court.\
Include in your output the name of the court, and the name of the member\
formatted as a single column. Ensure no duplicate data, and order by\
the member name. */\
\
SELECT DISTINCT Facilities.name, CONCAT(Members.firstname,' ', Members.surname) AS name\
FROM Facilities\
INNER JOIN Bookings ON Facilities.facid = Bookings.facid\
INNER JOIN Members ON Bookings.memid = Members.memid \
WHERE Facilities.name LIKE 'Tennis%'\
ORDER BY name\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 /* Q8: Produce a list of bookings on the day of 2012-09-14 which\
will cost the member (or guest) more than $30. Remember that guests have\
different costs to members (the listed costs are per half-hour 'slot'), and\
the guest user's ID is always 0. Include in your output the name of the\
facility, the name of the member formatted as a single column, and the cost.\
Order by descending cost, and do not use any subqueries. */\
\
SELECT Facilities.name, CONCAT(Members.firstname,' ', Members.surname) AS name, \
		CASE \
        	WHEN Members.memid > 0 THEN Bookings.slots*Facilities.membercost\
            ELSE Bookings.slots*Facilities.guestcost\
        END AS 'bookingcost'\
FROM Facilities\
INNER JOIN Bookings ON Facilities.facid = Bookings.facid\
INNER JOIN Members ON Bookings.memid = Members.memid\
WHERE Bookings.starttime LIKE '2012-09-14%' AND (CASE \
        	WHEN Members.memid > 0 THEN Bookings.slots*Facilities.membercost\
            ELSE Bookings.slots*Facilities.guestcost\
        END) > 30.\
ORDER BY bookingcost DESC;\
\
\
/* Q9: This time, produce the same result as in Q8, but using a subquery. */\
\
SELECT *\
FROM (SELECT Facilities.name, CONCAT(Members.firstname,' ', Members.surname) AS fullname, \
		CASE \
        	WHEN Members.memid > 0 THEN Bookings.slots*Facilities.membercost\
            ELSE Bookings.slots*Facilities.guestcost\
        END AS 'bookingcost'\
		FROM Facilities\
		INNER JOIN Bookings ON Facilities.facid = Bookings.facid\
		INNER JOIN Members ON Bookings.memid = Members.memid\
        WHERE Bookings.starttime LIKE '2012-09-14%') AS subquery\
WHERE bookingcost > 30\
ORDER BY bookingcost DESC;\
\
\
/* Q10: Produce a list of facilities with a total revenue less than 1000.\
The output of facility name and total revenue, sorted by revenue. Remember\
that there's a different cost for guests and members! */\
\
SELECT Facilities.name,\
		SUM(CASE \
        		WHEN Bookings.memid > 0 THEN Bookings.slots*Facilities.membercost\
            	ELSE Bookings.slots*Facilities.guestcost\
        	END \
            ) AS 'total_revenue'\
FROM Bookings\
INNER JOIN Facilities ON Bookings.facid = Facilities.facid\
GROUP BY Facilities.name\
HAVING total_revenue < 1000.\
ORDER BY total_revenue;\
\
\
/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */\
\
SELECT a.surname, a.firstname, CONCAT(b.firstname,' ',b.surname) AS recommended_by\
FROM Members a\
JOIN Members b ON a.recommendedby = b.memid\
WHERE a.memid > 0\
ORDER BY a.surname, a.firstname;\
\
\
/* Q12: Find the facilities with their usage by member, but not guests */\
\
SELECT COUNT(DISTINCT Bookings.memid) AS member_count, Facilities.name\
FROM Bookings\
INNER JOIN Facilities ON Bookings.facid = Facilities.facid\
WHERE Bookings.memid > 0\
GROUP BY Facilities.name;\
\
\
/* Q13: Find the facilities usage by month, but not guests */\
\
SELECT MONTH(Bookings.starttime) AS month, Facilities.name, COUNT(*) AS facility_count\
FROM Bookings\
INNER JOIN Facilities ON Bookings.facid = Facilities.facid \
WHERE memid > 0\
GROUP BY MONTH(Bookings.starttime), Facilities.name\
ORDER BY month, facility_count DESC;\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
}
